[hub]
  protocol = https
[user]
  helper     = osxkeychain
  name       = Bruno Pinto
  email      = bruno@bpinto.com
  signingkey = bruno@bpinto.com
[alias]
  ctags = !.git/hooks/ctags
  ds    = diff --staged
  lg    = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  ll    = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --decorate --numstat
  lga   = log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  lla   = log --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --decorate --numstat
  patch = diff --no-color
  pf    = push --force-with-lease
  pr    = pull --rebase
  st    = status -sb

  # Amend the currently staged files to the latest commit
  amend = commit --amend -C HEAD

  # Interactive checkout
  co = "!f() { [ $# != 0 ] && git checkout $@ || git checkout $(git branch | grep -v '^*' | fzf --preview 'git show --color $(git merge-base master {+1})..{+1}'); }; f"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Credit an author on the latest commit
  credit = "!git shortlog --email --numbered --summary | fzf --reverse --delimiter='\t' --bind 'enter:execute(git commit --amend --author \"{+2}\" -C HEAD)+accept'"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  ;dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"

  # Remove branches that have already been "squash-merged" into master
  # a.k.a 'delete squashed'
  dm = "!git for-each-ref refs/heads/ '--format=%(refname:short)' | while read branch; do mergeBase=$(git merge-base master $branch) && [[ $(git cherry master $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == '-'* ]] && git branch -D $branch; done"

  # Interactive fixup
  fixup = "!git --no-pager lg --color | fzf --ansi --delimiter='[*-]' --exact --multi --no-sort --preview 'echo {+2} | grep -E -o \"[a-f0-9]+\" | xargs git show -m --color' --reverse --bind 'enter:execute(echo {+2} | xargs git commit --fixup)+accept'"

  # Interactive rebase
  reb = "!git --no-pager lga --color | fzf --ansi --delimiter='[*-]' --exact --multi --no-sort --preview 'echo {+2} | grep -E -o \"[a-f0-9]+\" | xargs git show -m --color' --reverse --bind 'enter:execute(echo {+2} | xargs git rebase -i --autosquash)+accept' --query='origin/master'"

  # Interactive revert
  rev = "!git --no-pager lg --color | fzf --ansi --delimiter='[*-]' --exact --multi --no-sort --preview 'echo {+2} | grep -E -o \"[a-f0-9]+\" | xargs git show -m --color' --reverse --bind 'enter:execute(echo {+2} | xargs git revert)+accept'"
[apply]
  whitespace = nowarn
[branch]
  sort = -authordate
[commit]
  gpgsign  = true
  template = ~/.gitmessage
[core]
  editor       = nvim
  excludesfile = ~/.gitignore
  pager        = delta

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space
[delta]
  plus-style = "syntax #32361a"
  minus-style = "syntax #3c1f1e"
  features = side-by-side line-numbers decorations
  syntax-theme = gruvbox-dark
  navigate = true
[delta "decorations"]
  commit-decoration-style = bold yellow box ul
  file-style = bold ul
  file-decoration-style = none
  hunk-header-decoration-style = "#5a524c" box ul
[delta "line-numbers"]
  line-numbers-plus-style = "#6c782e"
  line-numbers-minus-style = "#c14a4a"
  line-numbers-left-style = "#5a524c"
  line-numbers-right-style = "#5a524c"
  line-numbers-zero-style = "#5a524c"
[difftool]
  prompt = false
[format]
  signoff = true
[github]
  user = bpinto
[help]
  autocorrect = 1
[init]
  templatedir = ~/.git_template
[interactive]
  diffFilter = delta --color-only
[pager]
  diff = delta
  log = delta
  reflog = delta
  show = delta

  # Filter git log results with FZF and display commit on fzf preview box
  lg = fzf --ansi --delimiter='[*-]' --exact --multi --no-sort --preview 'echo {+2} | grep -E -o \"[a-f0-9]+\" | xargs git show -m --color' --reverse --bind 'enter:execute(echo -n {+2} | pbcopy)+accept'

  # Filter git log results with FZF and display commit on fzf preview box
  lga = fzf --ansi --delimiter='[*-]' --exact --multi --no-sort --preview 'echo {+2} | grep -E -o \"[a-f0-9]+\" | xargs git show -m --color' --reverse --bind 'enter:execute(echo -n {+2} | pbcopy)+accept'

  # Bare commit
  patch = cat
[push]
  autoSetupRemote = true
  # Setting to git 2.0 default to suppress warning message
  default = simple
[pull]
  rebase = true
