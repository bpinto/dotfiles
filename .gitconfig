[hub]
  protocol = https
[user]
  helper     = osxkeychain
  name       = Bruno Pinto
  email      = brunoferreirapinto@gmail.com
  signingkey = brunoferreirapinto@gmail.com
[alias]
  co    = checkout
  ctags = !.git/hooks/ctags
  ds    = diff --staged
  lg    = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  ll    = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --decorate --numstat
  lga   = log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  lla   = log --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --decorate --numstat
  patch = diff --no-color
  pf    = push --force-with-lease
  pr    = pull --rebase
  st    = status -sb

  # Amend the currently staged files to the latest commit
  amend = commit --amend -C HEAD

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Credit an author on the latest commit
  credit = "!git shortlog --email --numbered --summary | fzf --reverse --delimiter='\t' --bind 'enter:execute(git commit --amend --author \"{+2}\" -C HEAD)+abort'"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"

  # Interactive fixup
  fixup = "!git --no-pager lg --color | fzf --ansi --delimiter='[*-]' --exact --multi --no-sort --preview 'echo {+2} | sed 's/[^a-zA-Z0-9]//g' | xargs -r git show -m --color' --reverse --bind 'enter:execute(echo {+2} | sed 's/[^a-zA-Z0-9]//g' | xargs -r git commit --fixup)+abort'"

  # Interactive rebase
  reb = "!git --no-pager lga --color | fzf --ansi --delimiter='[*-]' --exact --multi --no-sort --preview 'echo {+2} | sed 's/[^a-zA-Z0-9]//g' | xargs -r git show -m --color' --reverse --bind 'enter:execute(echo {+2} | sed 's/[^a-zA-Z0-9]//g' | xargs -r git rebase -i --autosquash)+abort'"
[apply]
  whitespace = nowarn
[color "diff"]
  commit     = yellow bold
  frag       = magenta bold
  meta       = yellow
  new        = green bold
  old        = red bold
  whitespace = red reverse
[color "diff-highlight"]
  oldNormal    = red bold
  oldHighlight = "red bold 52"
  newNormal    = "green bold"
  newHighlight = "green bold 22"
[commit]
  gpgsign  = true
  template = ~/.gitmessage
[core]
  editor       = nvim
  excludesfile = ~/.gitignore
  pager        = diff-so-fancy | less --tabs=4 -RFX

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space
[difftool]
  prompt = false
[github]
  user = bpinto
[help]
  autocorrect = 1
[init]
  templatedir = ~/.git_template
[pager]
  # Easy commit navigation with initial search per file
  diff = diff-so-fancy | less --tabs=4 -RFX --pattern '^(Date|added|deleted|modified): '

  # Filter git log results with FZF and display commit on fzf preview box
  lg = fzf --ansi --delimiter='[*-]' --exact --multi --no-sort --preview 'echo {+2} | sed 's/[^a-zA-Z0-9]//g' | xargs -r git show -m --color' --reverse

  # Filter git log results with FZF and display commit on fzf preview box
  lga = fzf --ansi --delimiter='[*-]' --exact --multi --no-sort --preview 'echo {+2} | sed 's/[^a-zA-Z0-9]//g' | xargs -r git show -m --color' --reverse

  # Bare commit
  patch = cat

  # Easy commit navigation with initial search per file
  show = diff-so-fancy | less --tabs=4 -RFX --pattern '^(Date|added|deleted|modified): '
[push]
  # Setting to git 2.0 default to surpress warning message
  default = simple
